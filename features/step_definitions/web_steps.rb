# TL;DR: YOU SHOULD DELETE THIS FILE
#
# This file was generated by Cucumber-Rails and is only here to get you a head start
# These step definitions are thin wrappers around the Capybara/Webrat API that lets you
# visit pages, interact with widgets and make assertions about page content.
#
# If you use these step definitions as basis for your features you will quickly end up
# with features that are:
#
# * Hard to maintain
# * Verbose to read
#
# A much better approach is to write your own higher level step definitions, following
# the advice in the following blog posts:
#
# * http://benmabey.com/2008/05/19/imperative-vs-declarative-scenarios-in-user-stories.html
# * http://dannorth.net/2011/01/31/whose-domain-is-it-anyway/
# * http://elabs.se/blog/15-you-re-cuking-it-wrong
#


require 'uri'
require 'cgi'
require File.expand_path(File.join(File.dirname(__FILE__), "..", "support", "paths"))
require File.expand_path(File.join(File.dirname(__FILE__), "..", "support", "selectors"))

module WithinHelpers
  def with_scope(locator)
    locator ? within(*selector_for(locator)) { yield } : yield
  end
end
World(WithinHelpers)

## Single-line step scoper
#When /^(.*) within (.*[^:])$/ do |step, parent|
  #with_scope(parent) { When step }
#end

## Multi-line step scoper
#When /^(.*) within (.*[^:]):$/ do |step, parent, table_or_string|
  #with_scope(parent) { When "#{step}:", table_or_string }
#end

##Given /^(?:|I )am on (.+)$/ do |page_name|
  ##visit path_to(page_name)
##end

#When /^(?:|I )go to (.+)$/ do |page_name|
  #visit path_to(page_name)
#end

##When /^(?:|I )press "([^"]*)"$/ do |button|
  ##click_button(button)
##end

#When /^(?:|I )follow "([^"]*)"$/ do |link|
  #click_link(link)
#end

#When /^(?:|I )fill in "([^"]*)" with "([^"]*)"$/ do |field, value|
  #fill_in(field, :with => value)
#end

#When /^(?:|I )fill in "([^"]*)" for "([^"]*)"$/ do |value, field|
  #fill_in(field, :with => value)
#end

## Use this to fill in an entire form with data from a table. Example:
##
##   When I fill in the following:
##     | Account Number | 5002       |
##     | Expiry date    | 2009-11-01 |
##     | Note           | Nice guy   |
##     | Wants Email?   |            |
##
## TODO: Add support for checkbox, select or option
## based on naming conventions.

#Given /^these Products$/ do |fields|
  #fields.rows_hash.each do |name, desc, price|
    #When %{I fill in "#{name}" with "#{value}"}
  #end
#end

#When /^(?:|I )select "([^"]*)" from "([^"]*)"$/ do |value, field|
  #select(value, :from => field)
#end

#When /^(?:|I )check "([^"]*)"$/ do |field|
  #check(field)
#end

#When /^(?:|I )uncheck "([^"]*)"$/ do |field|
  #uncheck(field)
#end

#When /^(?:|I )choose "([^"]*)"$/ do |field|
  #choose(field)
#end

#When /^(?:|I )attach the file "([^"]*)" to "([^"]*)"$/ do |path, field|
  #attach_file(field, File.expand_path(path))
#end

#Then /^(?:|I )should see "([^"]*)"$/ do |text|
  #if page.respond_to? :should
    #page.should have_content(text)
  #else
    #assert page.has_content?(text)
  #end
#end

#Then /^(?:|I )should see \/([^\/]*)\/$/ do |regexp|
  #regexp = Regexp.new(regexp)

  #if page.respond_to? :should
    #page.should have_xpath('//*', :text => regexp)
  #else
    #assert page.has_xpath?('//*', :text => regexp)
  #end
#end

#Then /^(?:|I )should not see "([^"]*)"$/ do |text|
  #if page.respond_to? :should
    #page.should have_no_content(text)
  #else
    #assert page.has_no_content?(text)
  #end
#end

#Then /^(?:|I )should not see \/([^\/]*)\/$/ do |regexp|
  #regexp = Regexp.new(regexp)

  #if page.respond_to? :should
    #page.should have_no_xpath('//*', :text => regexp)
  #else
    #assert page.has_no_xpath?('//*', :text => regexp)
  #end
#end

#Then /^the "([^"]*)" field(?: within (.*))? should contain "([^"]*)"$/ do |field, parent, value|
  #with_scope(parent) do
    #field = find_field(field)
    #field_value = (field.tag_name == 'textarea') ? field.text : field.value
    #if field_value.respond_to? :should
      #field_value.should =~ /#{value}/
    #else
      #assert_match(/#{value}/, field_value)
    #end
  #end
#end

#Then /^the "([^"]*)" field(?: within (.*))? should not contain "([^"]*)"$/ do |field, parent, value|
  #with_scope(parent) do
    #field = find_field(field)
    #field_value = (field.tag_name == 'textarea') ? field.text : field.value
    #if field_value.respond_to? :should_not
      #field_value.should_not =~ /#{value}/
    #else
      #assert_no_match(/#{value}/, field_value)
    #end
  #end
#end

#Then /^the "([^"]*)" field should have the error "([^"]*)"$/ do |field, error_message|
  #element = find_field(field)
  #classes = element.find(:xpath, '..')[:class].split(' ')

  #form_for_input = element.find(:xpath, 'ancestor::form[1]')
  #using_formtastic = form_for_input[:class].include?('formtastic')
  #error_class = using_formtastic ? 'error' : 'field_with_errors'

  #if classes.respond_to? :should
    #classes.should include(error_class)
  #else
    #assert classes.include?(error_class)
  #end

  #if page.respond_to?(:should)
    #if using_formtastic
      #error_paragraph = element.find(:xpath, '../*[@class="inline-errors"][1]')
      #error_paragraph.should have_content(error_message)
    #else
      #page.should have_content("#{field.titlecase} #{error_message}")
    #end
  #else
    #if using_formtastic
      #error_paragraph = element.find(:xpath, '../*[@class="inline-errors"][1]')
      #assert error_paragraph.has_content?(error_message)
    #else
      #assert page.has_content?("#{field.titlecase} #{error_message}")
    #end
  #end
#end

#Then /^the "([^"]*)" field should have no error$/ do |field|
  #element = find_field(field)
  #classes = element.find(:xpath, '..')[:class].split(' ')
  #if classes.respond_to? :should
    #classes.should_not include('field_with_errors')
    #classes.should_not include('error')
  #else
    #assert !classes.include?('field_with_errors')
    #assert !classes.include?('error')
  #end
#end

#Then /^the "([^"]*)" checkbox(?: within (.*))? should be checked$/ do |label, parent|
  #with_scope(parent) do
    #field_checked = find_field(label)['checked']
    #if field_checked.respond_to? :should
      #field_checked.should be_true
    #else
      #assert field_checked
    #end
  #end
#end

#Then /^the "([^"]*)" checkbox(?: within (.*))? should not be checked$/ do |label, parent|
  #with_scope(parent) do
    #field_checked = find_field(label)['checked']
    #if field_checked.respond_to? :should
      #field_checked.should be_false
    #else
      #assert !field_checked
    #end
  #end
#end
 
#Then /^(?:|I )should be on (.+)$/ do |page_name|
  #current_path = URI.parse(current_url).path
  #if current_path.respond_to? :should
    #current_path.should == path_to(page_name)
  #else
    #assert_equal path_to(page_name), current_path
  #end
#end

#Then /^(?:|I )should have the following query string:$/ do |expected_pairs|
  #query = URI.parse(current_url).query
  #actual_params = query ? CGI.parse(query) : {}
  #expected_params = {}
  #expected_pairs.rows_hash.each_pair{|k,v| expected_params[k] = v.split(',')} 
  
  #if actual_params.respond_to? :should
    #actual_params.should == expected_params
  #else
    #assert_equal expected_params, actual_params
  #end
#end

#Then /^show me the page$/ do
  #save_and_open_page
#end



Given /^these Products:$/i do |table|
  table.hashes.each do |fhash|
    if fhash.has_key? "minage"
      fhash["minimum_age_appropriate"] = fhash.delete("minage")
    end
    if fhash.has_key? "maxage"
      fhash["maximum_age_appropriate"] = fhash.delete("maxage")
    end
    Product.create!(fhash)
  #Product.create!(table.hashes)
  end
end

Given /^(?:|I )am on (.+)$/ do |page_name|
  visit path_to(page_name)
end

When /^(?:|I )fill in the following:$/ do |fields|
  fields.rows_hash.each do |name, value|
    fill_in name, with: value
  end
end

#And /^I press "Create product"$/ do
  #click_button("Create Product")
#end

#When(/^"(.*?)"Name"(.*?)"pointy stick"(.*?)"$/) do |arg1, arg2, arg3, table|
  ## table is a Cucumber::Ast::Table
  #pending # express the regexp above with the code you wish you had
#end

Then(/^I should be on the products page$/) do
  expect(page).to have_content("All products")
end

Then(/^I should see "(.*?)"$/) do |text|
  expect(page).to have_content(text)
end

Then(/^I should see that "(.*?)" has a price of "(.*?)"$/) do |name, price|
  names = []
  all(".productname").each { |n| names << n.text }
  prices = []
  all(".price").each { |p| prices << p.text }
  expect(names.index(name)).to eq(prices.index(price))

end

Then(/^I should see that "(.*?)" has an image "(.*?)"$/) do |name, path|
  names = []
  all(".productname").each { |n| names << n.text }
  images = []
  all("img").each { |i| images << i['src'] }
  #expect()
  #expect(path).to eq(images[names.index(name)])
  expect(images[names.index(name)]).to match(/.*#{path}.*/)

#within('table.products_table') { expect(page).to have_content(arg2)}
  #all('table.products_table tr').each do |tr|
    #next if tr.has_selector?('')
    #expect(tr).to have_selector('img') if tr.has_content?(name)
  #end
end

When(/^I attach the file "(.*?)" to "(.*?)"$/) do |arg1, arg2|
  attach_file('Image', arg1)
end

When(/^I go to the products page$/) do
  visit(products_path)
end

When(/^I fill in "(.*?)" with "(.*?)"$/i) do |label, input|
  if label =~ /minimum age/i
    page.fill_in 'filter[min_age]', with: input
    #page.fill_in 'minimum_age', with: input
  elsif label =~ /maximum price/i
    page.fill_in 'filter[max_price]', with: input
  #page.fill_in label, :with => input
  else
    page.fill_in label, with: input
  end
end

When(/^I press "(.*?)"$/) do |thing|
  click_on(thing)
end

Then(/^I should not see "(.*?)"$/) do |arg1|

end

Then(/^I should see product price in sorted order$/) do
  prices = []
  all(".price").each { |n| prices << n.text }
  prices.map! { |price| price[1..-1].to_f }
  expect(prices).to eq(prices.sort)
end

Then(/^I should see product name in sorted order$/) do
  names = []
  all(".product_name").each { |name| names << name.text }
  expect(names).to eq(names.sort)
end

Then(/^I should see the image "(.*?)"$/) do |path|
  expect(all('img').first['src']).to match(/#{path}/)
  #images[names.index(name)].should match(/.*#{path}.*/)
end

#TODO: and I should see $17.50
#and I should see $999.95

#Then(/^I should see that "(.*?)" has a price of "(.*?)"$/) do |arg1, arg2|
  #pending # express the regexp above with the code you wish you had
#end

#Then(/^I should see that "(.*?)" has an image "(.*?)"$/) do |arg1, arg2|
  #pending # express the regexp above with the code you wish you had
#end

#Then(/^I should see product price in sorted order$/) do
  #pending # express the regexp above with the code you wish you had
#end

#Then(/^I should see product name in sorted order$/) do
  #pending # express the regexp above with the code you wish you had
#end

#Then(/^I should see the image "(.*?)"$/) do |arg1|
  #pending # express the regexp above with the code you wish you had
#end

